import math
import csv

def load_csv(filename):
    with open(filename, newline='', encoding='utf-8') as file:
        lines = csv.reader(file)
        dataset = list(lines)
        headers = dataset.pop(0)
    return dataset, headers

class Node:
    def __init__(self, attribute):
        self.attribute = attribute
        self.children = []
        self.answer = ""

def subtables(data, col, delete):
    dic = {}
    coldata = [row[col] for row in data]
    attr = list(set(coldata))
    
    for value in attr:
        dic[value] = []
    
    for row in data:
        key = row[col]
        new_row = row[:col] + row[col+1:] if delete else row[:]
        dic[key].append(new_row)
    
    return attr, dic

def entropy(S):
    attr = list(set(S))
    if len(attr) == 1:
        return 0
    counts = [S.count(x) / len(S) for x in attr]
    return sum([-p * math.log2(p) for p in counts if p > 0])

def compute_gain(data, col):
    attr, dic = subtables(data, col, delete=False)
    total_size = len(data)
    total_entropy = entropy([row[-1] for row in data])
    weighted_entropy = sum((len(dic[a]) / total_size) * entropy([row[-1] for row in dic[a]]) for a in attr)
    
    return total_entropy - weighted_entropy

def build_tree(data, features):
    lastcol = [row[-1] for row in data]
    if len(set(lastcol)) == 1:
        node = Node("")
        node.answer = lastcol[0]
        return node
    
    n = len(data[0]) - 1
    gains = [compute_gain(data, col) for col in range(n)]
    split = gains.index(max(gains))
    
    node = Node(features[split])
    fea = features[:split] + features[split + 1:]
    attr, dic = subtables(data, split, delete=True)
    
    for value, subset in dic.items():
        child = build_tree(subset, fea)
        node.children.append((value, child))
    
    return node

def print_tree(node, level=0):
    if node.answer:
        print(" " * level + "â†’ " + node.answer)
        return
    print(" " * level + node.attribute)
    for value, n in node.children:
        print(" " * (level + 2) + "|-" + value)
        print_tree(n, level + 4)

def classify(node, x_test, features):
    if node.answer:
        print(node.answer)
        return node.answer
    pos = features.index(node.attribute)
    for value, n in node.children:
        if x_test[pos] == value:
            return classify(n, x_test, features)

'''Main program'''
dataset, features = load_csv(r"filename.csv")
tree = build_tree(dataset, features)
print("The decision tree for the dataset using ID3 algorithm is:")
print_tree(tree)

testdata, features = load_csv(r"id3_test.csv")
for xtest in testdata:
    print("The test instance:", xtest)
    print("The label for test instance:", end=" ")
    classify(tree, xtest, features)
